/* Напишите функцию, которая возвращает одну из функций, выполняющих математическое действие (сложение, вычитание, умножение, деление) над двумя аргументами.
 * Результат возврата (одна из четырех возвращаемых функции) определяется значением аргумента ("+", "-", "*", "/").
 * Для выбора типа операций использовать конструкцию switch..case.
 * При вводе неподдерживаемых операций или попытке деления на 0 возвращать `null`.
 */

function getOp(op) {
    switch(op) {
      case "+":
        return (a, b) => a + b;
      case "-":
        return (a, b) => a + b;
      case "*":
        return (a, b) => a * b;
      case "/": {
        return (a, b) => b == 0 ? null : a / b;
      }
      default:
        return null;
    }
}

/* Tests */
const ops = ["+", "-", "*", "/", "%", "", null, undefined];
const testPairs = [
  [5, 3],
  [10, 0],
  [-4, 2],
  [0, 0],
];

/* Tests */
ops.forEach(op => {
  const func = getOp(op);
  console.log(`Тест операции: ${op}`);

  if (func === null) {
    console.log("Операция не поддерживается.");
  } else {
    testPairs.forEach(([a, b]) => {
      let result;
      try {
        result = func(a, b);
      } catch(e) {
        result = "Ошибка";
      }
      console.log(`  ${a} и ${b} => ${result}`);
    });
  }
});

/* Test results
Тест операции: +
  5 и 3 => 8
  10 и 0 => 10
  -4 и 2 => -2
  0 и 0 => 0

Тест операции: -
  5 и 3 => 8
  10 и 0 => 10
  -4 и 2 => -2
  0 и 0 => 0

Тест операции: *
  5 и 3 => 15
  10 и 0 => 0
  -4 и 2 => -8
  0 и 0 => 0

Тест операции: /
  5 и 3 => 1.6666666666666667
  10 и 0 => null
  -4 и 2 => -2
  0 и 0 => null

Тест операции: %
Операция не поддерживается.

Тест операции:
Операция не поддерживается.

Тест операции: null
Операция не поддерживается.

Тест операции: undefined
Операция не поддерживается.
*/